[{"content":"最近在做一个消息推送企业某信的需求，使用的不是官方的api,而是和企业某信可以集成的云办公平台的api。由于api有ip白名单限制，导致我必须在特定化网络环境下发请求，测试很麻烦，所以想测试一下能不能绕过限制。 想要绕过限制，首先要知道服务器如何获取发送者的ip。\n服务器如何获取请求者ip 获取请求者 IP 本质上就两个来源：\n直接从 IP 数据包获取 这就是 HttpServletRequest的getRemoteAddr() 的工作原理，获取的是直接与服务器建立 TCP 连接的客户端 IP，在没有代理的情况下,这就是真实的客户端 IP 从 HTTP 请求头获取 常见的请求头有: X-Forwarded-For X-Real-IP Proxy-Client-IP WL-Proxy-Client-IP 测试 这里我使用了postman伪造了请求头X-Forwarded-For，经过测试，理论上只要知道正确的ip，就可以让ip白名单功能失效。\n如果你有服务器的访问权限，但是只知道服务器的内网ip，可以尝试\ncurl ifconfig.me 然后就能得到服务器的公网ip了\n安全建议 改用网络层的源IP地址(TCP/IP报文中的source IP)进行验证\n如果必须使用代理转发,建议只信任内部代理服务器传递的XFF头\n吐槽 某云办公平台必须付费才能获得访问api的密钥，并且密钥只有一个，测试只能直接在正式系统测\n","permalink":"https://qvqw.date/posts/%E6%9F%90%E4%BA%91%E5%8A%9E%E5%85%AC%E5%BA%94%E7%94%A8api%E5%AD%98%E5%9C%A8ip%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87%E9%A3%8E%E9%99%A9/","summary":"最近在做一个消息推送企业某信的需求，使用的不是官方的api,而是和企业某信可以集成的云办公平台的api。由于api有ip白名单限制，导致我必须在特定化网络环境下发请求，测试很麻烦，所以想测试一下能不能绕过限制。 想要绕过限制，首先要知道服务器如何获取发送者的ip。\n服务器如何获取请求者ip 获取请求者 IP 本质上就两个来源：\n直接从 IP 数据包获取 这就是 HttpServletRequest的getRemoteAddr() 的工作原理，获取的是直接与服务器建立 TCP 连接的客户端 IP，在没有代理的情况下,这就是真实的客户端 IP 从 HTTP 请求头获取 常见的请求头有: X-Forwarded-For X-Real-IP Proxy-Client-IP WL-Proxy-Client-IP 测试 这里我使用了postman伪造了请求头X-Forwarded-For，经过测试，理论上只要知道正确的ip，就可以让ip白名单功能失效。\n如果你有服务器的访问权限，但是只知道服务器的内网ip，可以尝试\ncurl ifconfig.me 然后就能得到服务器的公网ip了\n安全建议 改用网络层的源IP地址(TCP/IP报文中的source IP)进行验证\n如果必须使用代理转发,建议只信任内部代理服务器传递的XFF头\n吐槽 某云办公平台必须付费才能获得访问api的密钥，并且密钥只有一个，测试只能直接在正式系统测","title":"某云办公应用api存在IP白名单绕过风险"},{"content":"目前使用hugo作为博客系统，使用typora作为博客的编辑器。书接上文Hugo使用技巧，之前每次都需要在博客根目录执行\nhugo new posts/文章标题/index.md 创建新的文章。感觉很麻烦。所以想写个工具简化这个过程。\n思路 输入文件标题后执行创建文章的命令，然后生成新的文章的快捷方式，方便使用typora进行编辑。\n代码 使用Claude生成的，很方便。\n如果是windows平台，使用\ngo build -o HugoHelper.exe main.go 进行编译。\n使用前需要配置blog环境变量，key为blog,value为你的项目的根路径\n比如我的根目录是C:\\UGit\\qvqw.date\n代码\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;strings\u0026#34; ) func main() { // 获取当前程序执行路径 execPath, err := os.Getwd() if err != nil { fmt.Printf(\u0026#34;错误: 获取当前路径失败: %v\\n\u0026#34;, err) os.Exit(1) } // 从环境变量获取博客路径 blogPath := os.Getenv(\u0026#34;blog\u0026#34;) if blogPath == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;错误: 环境变量 \u0026#39;blog\u0026#39; 未设置\u0026#34;) os.Exit(1) } // 验证博客路径是否存在 if _, err := os.Stat(blogPath); os.IsNotExist(err) { fmt.Printf(\u0026#34;错误: 博客路径不存在: %s\\n\u0026#34;, blogPath) os.Exit(1) } // 获取用户输入的文章标题 reader := bufio.NewReader(os.Stdin) fmt.Print(\u0026#34;请输入文章标题: \u0026#34;) title, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil { fmt.Printf(\u0026#34;错误: 读取输入失败: %v\\n\u0026#34;, err) os.Exit(1) } // 清理标题（移除空白字符和换行符） title = strings.TrimSpace(title) if title == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;错误: 标题不能为空\u0026#34;) os.Exit(1) } // 构建 hugo 命令 cmd := exec.Command(\u0026#34;hugo\u0026#34;, \u0026#34;new\u0026#34;, fmt.Sprintf(\u0026#34;posts/%s/index.md\u0026#34;, title)) cmd.Dir = blogPath cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr // 执行命令 if err := cmd.Run(); err != nil { fmt.Printf(\u0026#34;错误: 创建文章失败: %v\\n\u0026#34;, err) os.Exit(1) } // 源文件路径（Hugo 创建的文件） sourceFile := filepath.Join(blogPath, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;, title, \u0026#34;index.md\u0026#34;) // 目标软链接路径（在当前目录） linkName := filepath.Join(execPath, fmt.Sprintf(\u0026#34;%s.md\u0026#34;, title)) // 删除已存在的软链接（如果有的话） _ = os.Remove(linkName) // 创建软链接 err = os.Symlink(sourceFile, linkName) if err != nil { fmt.Printf(\u0026#34;警告: 创建软链接失败: %v\\n\u0026#34;, err) } else { fmt.Printf(\u0026#34;成功创建软链接: %s -\u0026gt; %s\\n\u0026#34;, linkName, sourceFile) } fmt.Printf(\u0026#34;成功创建文章: %s\\n\u0026#34;, sourceFile) // 等待用户按回车键后退出 waitExit := bufio.NewReader(os.Stdin) fmt.Print(\u0026#34;按回车键退出...\u0026#34;) waitExit.ReadString(\u0026#39;\\n\u0026#39;) } 注意 如果无法创建软链接，请使用管理员权限运行。\n","permalink":"https://qvqw.date/posts/%E7%94%A8go%E5%86%99%E4%BA%86%E4%B8%AA%E7%AE%80%E5%8C%96hugo%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/","summary":"目前使用hugo作为博客系统，使用typora作为博客的编辑器。书接上文Hugo使用技巧，之前每次都需要在博客根目录执行\nhugo new posts/文章标题/index.md 创建新的文章。感觉很麻烦。所以想写个工具简化这个过程。\n思路 输入文件标题后执行创建文章的命令，然后生成新的文章的快捷方式，方便使用typora进行编辑。\n代码 使用Claude生成的，很方便。\n如果是windows平台，使用\ngo build -o HugoHelper.exe main.go 进行编译。\n使用前需要配置blog环境变量，key为blog,value为你的项目的根路径\n比如我的根目录是C:\\UGit\\qvqw.date\n代码\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;strings\u0026#34; ) func main() { // 获取当前程序执行路径 execPath, err := os.Getwd() if err != nil { fmt.Printf(\u0026#34;错误: 获取当前路径失败: %v\\n\u0026#34;, err) os.Exit(1) } // 从环境变量获取博客路径 blogPath := os.Getenv(\u0026#34;blog\u0026#34;) if blogPath == \u0026#34;\u0026#34; { fmt.Println(\u0026#34;错误: 环境变量 \u0026#39;blog\u0026#39; 未设置\u0026#34;) os.Exit(1) } // 验证博客路径是否存在 if _, err := os.","title":"用go写了个简化hugo文章创建的小工具"},{"content":"非原创，原文地址https://github.com/CodingDocs/springboot-guide/blob/master/docs/basis/springboot-jpa.md\nJPA 这部分内容上手很容易，但是涉及到的东西还是挺多的，网上大部分关于 JPA 的资料都不是特别齐全，大部分用的版本也是比较落后的。另外，我下面讲到了的内容也不可能涵盖所有 JPA 相关内容，我只是把自己觉得比较重要的知识点总结在了下面。我自己也是参考着官方文档写的，官方文档非常详细了，非常推荐阅读一下。这篇文章可以帮助对 JPA 不了解或者不太熟悉的人来在实际项目中正确使用 JPA。\n项目代码基于 Spring Boot 最新的 2.1.9.RELEASE 版本构建（截止到这篇文章写完），另外，新建项目就不多说了，前面的文章已经很详细介绍过。\n1.相关依赖 我们需要下面这些依赖支持我们完成这部分内容的学习：\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 2.配置数据库连接信息和JPA配置 由于使用的是 h2 内存数据库，所以你直接运行项目数据库就会自动创建好。\n下面的配置中需要单独说一下 spring.jpa.hibernate.ddl-auto=create这个配置选项。\n这个属性常用的选项有四种：\ncreate:每次重新启动项目都会重新创新表结构，会导致数据丢失 create-drop:每次启动项目创建表结构，关闭项目删除表结构 update:每次启动项目会更新表结构 validate:验证表结构，不对数据库进行任何更改 但是，一定要不要在生产环境使用 ddl 自动生成表结构，一般推荐手写 SQL 语句配合 Flyway 来做这些事情。\n# 数据库url地址 spring.datasource.url=jdbc:h2:mem:jpa-demo spring.datasource.username=root spring.datasource.password=123456 spring.datasource.platform=h2 spring.datasource.driverClassName =org.h2.Driver spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true # 打印出 sql 语句 spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=update spring.jpa.open-in-view=false server.port=8080 #H2控制台 spring.h2.console.enabled=true 3.实体类 我们为这个类添加了 @Entity 注解代表它是数据库持久化类，还配置了主键 id。\nimport lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity @Data @NoArgsConstructor public class Person { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(unique = true) private String name; private Integer age; public Person(String name, Integer age) { this.name = name; this.age = age; } } 如何检验你是否正确完成了上面 3 步?很简单，运行项目，查看数据如果发现控制台打印出创建表的 sql 语句，并且数据库中表真的被创建出来的话，说明你成功完成前面 3 步。\n控制台打印出来的 sql 语句类似下面这样：\ndrop table if exists person CREATE TABLE `person` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `age` int(11) DEFAULT NULL, `name` varchar(255) DEFAULT NULL， PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; alter table person add constraint UK_p0wr4vfyr2lyifm8avi67mqw5 unique (name) 4.创建操作数据库的 Repository 接口 @Repository public interface PersonRepository extends JpaRepository\u0026lt;Person, Long\u0026gt; { } 首先这个接口加了 @Repository 注解，代表它和数据库操作有关。另外，它继承了 JpaRepository\u0026lt;Person, Long\u0026gt;接口，而JpaRepository\u0026lt;Person, Long\u0026gt;长这样：\n@NoRepositoryBean public interface JpaRepository\u0026lt;T, ID\u0026gt; extends PagingAndSortingRepository\u0026lt;T, ID\u0026gt;, QueryByExampleExecutor\u0026lt;T\u0026gt; { List\u0026lt;T\u0026gt; findAll(); List\u0026lt;T\u0026gt; findAll(Sort var1); List\u0026lt;T\u0026gt; findAllById(Iterable\u0026lt;ID\u0026gt; var1); \u0026lt;S extends T\u0026gt; List\u0026lt;S\u0026gt; saveAll(Iterable\u0026lt;S\u0026gt; var1); void flush(); \u0026lt;S extends T\u0026gt; S saveAndFlush(S var1); void deleteInBatch(Iterable\u0026lt;T\u0026gt; var1); void deleteAllInBatch(); T getOne(ID var1); \u0026lt;S extends T\u0026gt; List\u0026lt;S\u0026gt; findAll(Example\u0026lt;S\u0026gt; var1); \u0026lt;S extends T\u0026gt; List\u0026lt;S\u0026gt; findAll(Example\u0026lt;S\u0026gt; var1, Sort var2); } 这表明我们只要继承了 JpaRepository\u0026lt;T, ID\u0026gt; 就具有了 JPA 为我们提供好的增删改查、分页查询以及根据条件查询等方法。\n4.1 JPA 自带方法实战 1) 增删改查 1.保存用户到数据库\nPerson person = new Person(\u0026#34;SnailClimb\u0026#34;, 23); personRepository.save(person); save()方法对应 sql 语句就是:insert into person (age, name) values (23,\u0026quot;snailclimb\u0026quot;)\n2.根据 id 查找用户\nOptional\u0026lt;Person\u0026gt; personOptional = personRepository.findById(id); findById()方法对应 sql 语句就是：select * from person p where p.id = id\n3.根据 id 删除用户\npersonRepository.deleteById(id); deleteById()方法对应 sql 语句就是：delete from person where id=id\n4.更新用户\n更新操作也要通过 save()方法来实现，比如：\nPerson person = new Person(\u0026#34;SnailClimb\u0026#34;, 23); Person savedPerson = personRepository.save(person); // 更新 person 对象的姓名 savedPerson.setName(\u0026#34;UpdatedName\u0026#34;); personRepository.save(savedPerson); 在这里 save()方法相当于 sql 语句：update person set name=\u0026quot;UpdatedName\u0026quot; where id=id\n2) 带条件的查询 下面这些方法是我们根据 JPA 提供的语法自定义的，你需要将下面这些方法写到 PersonRepository 中。\n假如我们想要根据 Name 来查找 Person ，你可以这样：\nOptional\u0026lt;Person\u0026gt; findByName(String name); 如果你想要找到年龄大于某个值的人，你可以这样：\nList\u0026lt;Person\u0026gt; findByAgeGreaterThan(int age); 4.2 自定义 SQL 语句实战 很多时候我们自定义 sql 语句会非常有用。\n根据 name 来查找 Person：\n@Query(\u0026#34;select p from Person p where p.name = :name\u0026#34;) Optional\u0026lt;Person\u0026gt; findByNameCustomeQuery(@Param(\u0026#34;name\u0026#34;) String name); Person 部分属性查询，避免 select *操作：\n@Query(\u0026#34;select p.name from Person p where p.id = :id\u0026#34;) String findPersonNameById(@Param(\u0026#34;id\u0026#34;) Long id); 根据 id 更新Person name：\n@Modifying @Query(\u0026#34;update Person p set p.name = ?1 where p.id = ?2\u0026#34;) void updatePersonNameById(String name, Long id); 4.3 创建异步方法 如果我们需要创建异步方法的话，也比较方便。\n异步方法在调用时立即返回，然后会被提交给TaskExecutor执行。当然你也可以选择得出结果后才返回给客户端。如果对 Spring Boot 异步编程感兴趣的话可以看这篇文章：《新手也能看懂的 SpringBoot 异步编程指南》 。\n@Async Future\u0026lt;User\u0026gt; findByName(String name); @Async CompletableFuture\u0026lt;User\u0026gt; findByName(String name); 5.测试类和源代码地址 测试类：\n@SpringBootTest @RunWith(SpringRunner.class) public class PersonRepositoryTest { @Autowired private PersonRepository personRepository; private Long id; /** * 保存person到数据库 */ @Before public void setUp() { assertNotNull(personRepository); Person person = new Person(\u0026#34;SnailClimb\u0026#34;, 23); Person savedPerson = personRepository.saveAndFlush(person);// 更新 person 对象的姓名 savedPerson.setName(\u0026#34;UpdatedName\u0026#34;); personRepository.save(savedPerson); id = savedPerson.getId(); } /** * 使用 JPA 自带的方法查找 person */ @Test public void should_get_person() { Optional\u0026lt;Person\u0026gt; personOptional = personRepository.findById(id); assertTrue(personOptional.isPresent()); assertEquals(\u0026#34;SnailClimb\u0026#34;, personOptional.get().getName()); assertEquals(Integer.valueOf(23), personOptional.get().getAge()); List\u0026lt;Person\u0026gt; personList = personRepository.findByAgeGreaterThan(18); assertEquals(1, personList.size()); // 清空数据库 personRepository.deleteAll(); } /** * 自定义 query sql 查询语句查找 person */ @Test public void should_get_person_use_custom_query() { // 查找所有字段 Optional\u0026lt;Person\u0026gt; personOptional = personRepository.findByNameCustomeQuery(\u0026#34;SnailClimb\u0026#34;); assertTrue(personOptional.isPresent()); assertEquals(Integer.valueOf(23), personOptional.get().getAge()); // 查找部分字段 String personName = personRepository.findPersonNameById(id); assertEquals(\u0026#34;SnailClimb\u0026#34;, personName); System.out.println(id); // 更新 personRepository.updatePersonNameById(\u0026#34;UpdatedName\u0026#34;, id); Optional\u0026lt;Person\u0026gt; updatedName = personRepository.findByNameCustomeQuery(\u0026#34;UpdatedName\u0026#34;); assertTrue(updatedName.isPresent()); // 清空数据库 personRepository.deleteAll(); } } 源代码地址：https://github.com/Snailclimb/springboot-guide/tree/master/source-code/basis/jpa-demo\n6. 总结 本文主要介绍了 JPA 的基本用法：\n使用 JPA 自带的方法进行增删改查以及条件查询。\n自定义 SQL 语句进行查询或者更新数据库。\n创建异步的方法。\n","permalink":"https://qvqw.date/posts/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bspring-jpa/","summary":"非原创，原文地址https://github.com/CodingDocs/springboot-guide/blob/master/docs/basis/springboot-jpa.md\nJPA 这部分内容上手很容易，但是涉及到的东西还是挺多的，网上大部分关于 JPA 的资料都不是特别齐全，大部分用的版本也是比较落后的。另外，我下面讲到了的内容也不可能涵盖所有 JPA 相关内容，我只是把自己觉得比较重要的知识点总结在了下面。我自己也是参考着官方文档写的，官方文档非常详细了，非常推荐阅读一下。这篇文章可以帮助对 JPA 不了解或者不太熟悉的人来在实际项目中正确使用 JPA。\n项目代码基于 Spring Boot 最新的 2.1.9.RELEASE 版本构建（截止到这篇文章写完），另外，新建项目就不多说了，前面的文章已经很详细介绍过。\n1.相关依赖 我们需要下面这些依赖支持我们完成这部分内容的学习：\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 2.配置数据库连接信息和JPA配置 由于使用的是 h2 内存数据库，所以你直接运行项目数据库就会自动创建好。\n下面的配置中需要单独说一下 spring.jpa.hibernate.ddl-auto=create这个配置选项。\n这个属性常用的选项有四种：\ncreate:每次重新启动项目都会重新创新表结构，会导致数据丢失 create-drop:每次启动项目创建表结构，关闭项目删除表结构 update:每次启动项目会更新表结构 validate:验证表结构，不对数据库进行任何更改 但是，一定要不要在生产环境使用 ddl 自动生成表结构，一般推荐手写 SQL 语句配合 Flyway 来做这些事情。\n# 数据库url地址 spring.datasource.url=jdbc:h2:mem:jpa-demo spring.datasource.username=root spring.datasource.password=123456 spring.datasource.platform=h2 spring.datasource.driverClassName =org.h2.Driver spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true # 打印出 sql 语句 spring.","title":"Spring Boot 快速上手 JPA"},{"content":"使用 cpolar 为 rock 5A 进行内网穿透 github 上有开源的 frp 项目，如果有一台云服务器的话，用来内网穿透很不错。但是，使用云服务+frp 的方案，开放某个端口，还需要去修改云服务的安全组，比较麻烦。考虑到方便性，我用了 cpolar 做内网穿透。\n注：rock 5A 为 arm 开发板，系统为 debian12（和树莓派、香橙派等 arm 计算机的教程理论上通用）\n安装 我这里使用的官方的一键安装脚本\ncurl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash 授权 执行下面 的命令进行授权（授权码在 cpolar 验证页面获取）\ncpolar authtoken xxxxxxxxxxxxxxxxxx 设置开机自启动并启动 cpolar 服务 systemctl enable cpolar systemctl start cpolar 完成上面的内容就基本上配置好了,你可以在 cpolar 官网的状态页面看到你的 ssh 隧道，可以通过该域名和端口远程访问本地的 rock 5A\n注意：cpolar 默认会配置本地机器 ssh 的 内网穿透，如需定制自己的内网穿透，请尝试根据官网文档修改配置文件。免费的内网穿透会在机器重启后变更域名和端口，重启后可以从 cpolar 官网状态页面获取，也可以考虑升级付费用户。\n配置文件 默认的配置文件在\n/usr/local/etc/cpolar/cpolar.yml 补充说明 使用过程中，我发现 cpolar 代理 http 导致了 rock 5A 的 cpu 占用飙升。后续我用了阿里云的服务器+frp 代理了 ssh,cloudflare tunnel 代理 http，cpu 占用几乎忽略不计。因此，建议 cpolar 内网穿透方案仅作备选。\n","permalink":"https://qvqw.date/posts/%E4%BD%BF%E7%94%A8cpolar%E4%B8%BArock5a%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","summary":"使用 cpolar 为 rock 5A 进行内网穿透 github 上有开源的 frp 项目，如果有一台云服务器的话，用来内网穿透很不错。但是，使用云服务+frp 的方案，开放某个端口，还需要去修改云服务的安全组，比较麻烦。考虑到方便性，我用了 cpolar 做内网穿透。\n注：rock 5A 为 arm 开发板，系统为 debian12（和树莓派、香橙派等 arm 计算机的教程理论上通用）\n安装 我这里使用的官方的一键安装脚本\ncurl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash 授权 执行下面 的命令进行授权（授权码在 cpolar 验证页面获取）\ncpolar authtoken xxxxxxxxxxxxxxxxxx 设置开机自启动并启动 cpolar 服务 systemctl enable cpolar systemctl start cpolar 完成上面的内容就基本上配置好了,你可以在 cpolar 官网的状态页面看到你的 ssh 隧道，可以通过该域名和端口远程访问本地的 rock 5A\n注意：cpolar 默认会配置本地机器 ssh 的 内网穿透，如需定制自己的内网穿透，请尝试根据官网文档修改配置文件。免费的内网穿透会在机器重启后变更域名和端口，重启后可以从 cpolar 官网状态页面获取，也可以考虑升级付费用户。\n配置文件 默认的配置文件在\n/usr/local/etc/cpolar/cpolar.yml 补充说明 使用过程中，我发现 cpolar 代理 http 导致了 rock 5A 的 cpu 占用飙升。后续我用了阿里云的服务器+frp 代理了 ssh,cloudflare tunnel 代理 http，cpu 占用几乎忽略不计。因此，建议 cpolar 内网穿透方案仅作备选。","title":"使用cpolar为rock5A进行内网穿透"},{"content":"记录一次系统迁移 开发板为 rock 5a，使用的为 Debian 系统。最近买了一个香橙派 5plus 的 64G 的 emmc(和 rock5A 通用并且比官方的更便宜)，打算将系统从内存卡迁移到 emmc。\n查看当前磁盘情况 fdisk -l 得到新磁盘名字为/dev/mmcblk0,原内存卡设备为/dev/mmcblk1\n使用 dd 命令迁移 系统 sudo dd if=/dev/mmcblk1 of=/dev/mmcblk0 bs=4M status=progress dd：待执行的命令，即复制和转换命令。\nif=/dev/mmcblk1：if 表示输入文件（input file）。/dev/mmcblk1 是源设备的文件路径，也就是数据的来源。\nof=/dev/mmcblk0：of 表示输出文件（output file）。/dev/mmcblk0 是目标设备的文件路径，也就是数据要写入的地方。\nbs=4M：bs 表示块大小（block size）。设置为每次读写 4M 数据。设定一个适当的块大小可以提高数据的复制速度。\nstatus=progress：这是一个可选参数，它可以实时显示dd命令的进度信息。这对于一些需要花费长时间的复制任务来说非常有用，可以让用户知道复制过程的进度。\n使用 parted 命令调整磁盘大小 如果不进行调整，系统可用大小还是默认的 32G\n先查看磁盘情况\nparted /dev/mmcblk0 print #查看指定设备的磁盘大小 然后我对第 3 个分区进行了调整，使其扩容到 emmc 最大能支持的容量\nparted /dev/mmcblk0 resizepart 3 100% 最后用 resize2f 命令调整文件系统大小\n","permalink":"https://qvqw.date/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB/","summary":"记录一次系统迁移 开发板为 rock 5a，使用的为 Debian 系统。最近买了一个香橙派 5plus 的 64G 的 emmc(和 rock5A 通用并且比官方的更便宜)，打算将系统从内存卡迁移到 emmc。\n查看当前磁盘情况 fdisk -l 得到新磁盘名字为/dev/mmcblk0,原内存卡设备为/dev/mmcblk1\n使用 dd 命令迁移 系统 sudo dd if=/dev/mmcblk1 of=/dev/mmcblk0 bs=4M status=progress dd：待执行的命令，即复制和转换命令。\nif=/dev/mmcblk1：if 表示输入文件（input file）。/dev/mmcblk1 是源设备的文件路径，也就是数据的来源。\nof=/dev/mmcblk0：of 表示输出文件（output file）。/dev/mmcblk0 是目标设备的文件路径，也就是数据要写入的地方。\nbs=4M：bs 表示块大小（block size）。设置为每次读写 4M 数据。设定一个适当的块大小可以提高数据的复制速度。\nstatus=progress：这是一个可选参数，它可以实时显示dd命令的进度信息。这对于一些需要花费长时间的复制任务来说非常有用，可以让用户知道复制过程的进度。\n使用 parted 命令调整磁盘大小 如果不进行调整，系统可用大小还是默认的 32G\n先查看磁盘情况\nparted /dev/mmcblk0 print #查看指定设备的磁盘大小 然后我对第 3 个分区进行了调整，使其扩容到 emmc 最大能支持的容量\nparted /dev/mmcblk0 resizepart 3 100% 最后用 resize2f 命令调整文件系统大小","title":"记录一次系统迁移"},{"content":"前端路线 0 Roadmap 新手 进阶 1 HTML \u0026amp; CSS freecodecamp网站 里的 『响应式网页设计认证』 css学习：learnlayout网站 flex 布局： 学习：vgee.cn网站 练习：flexboxfroggy 2 JavaScript 《JavaScript权威指南》第六版 （2012年出版）PDF 《JavaScript 高级程序设计》（2019年出版） JavaScript 教程：网址 阮一峰的 ES6 教程 3 框架 React Vue 4 构建工具 《前端工程化》基于Vue3 教材：网址 Webpack Vite 5 大而全的教程 微软的前端教程：github网址 coderwhy 大前端系列教程 各种教程的网站：质量挺高（英语） frontendmasters网址 MDN 网址：大而全的文档 ChatGPT：升级到 plus 版本，打开使用网络内容的设置 6 具体步骤 基础知识（a、b可同步进行） HTML \u0026amp; CSS JavaScript 学习框架 React：更适合作为第一个框架学习 Vue：使得用起来更方便，但不利于新人了解具体实现原理 构建工具 在学习框架时也会用到构建工具 学完框架后再系统性学习 抄一个网站 在学完 HTML \u0026amp; CSS 时可以抄静态页面 学完 JavaScript、框架后可以抄整个站 ","permalink":"https://qvqw.date/posts/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%BA%BF/","summary":"前端路线 0 Roadmap 新手 进阶 1 HTML \u0026amp; CSS freecodecamp网站 里的 『响应式网页设计认证』 css学习：learnlayout网站 flex 布局： 学习：vgee.cn网站 练习：flexboxfroggy 2 JavaScript 《JavaScript权威指南》第六版 （2012年出版）PDF 《JavaScript 高级程序设计》（2019年出版） JavaScript 教程：网址 阮一峰的 ES6 教程 3 框架 React Vue 4 构建工具 《前端工程化》基于Vue3 教材：网址 Webpack Vite 5 大而全的教程 微软的前端教程：github网址 coderwhy 大前端系列教程 各种教程的网站：质量挺高（英语） frontendmasters网址 MDN 网址：大而全的文档 ChatGPT：升级到 plus 版本，打开使用网络内容的设置 6 具体步骤 基础知识（a、b可同步进行） HTML \u0026amp; CSS JavaScript 学习框架 React：更适合作为第一个框架学习 Vue：使得用起来更方便，但不利于新人了解具体实现原理 构建工具 在学习框架时也会用到构建工具 学完框架后再系统性学习 抄一个网站 在学完 HTML \u0026amp; CSS 时可以抄静态页面 学完 JavaScript、框架后可以抄整个站 ","title":"前端路线"},{"content":"基于s3协议的对象存储如何创建或者删除文件夹 ​ 首先我们必须明确的是，对象存储没有文件 夹的概念，所谓的文件夹只是文件的前缀\n参考链接https://www.codemzy.com/blog/delete-s3-folder-nodejs\n","permalink":"https://qvqw.date/posts/%E5%9F%BA%E4%BA%8Es3%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%88%96%E8%80%85%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9/","summary":"基于s3协议的对象存储如何创建或者删除文件夹 ​ 首先我们必须明确的是，对象存储没有文件 夹的概念，所谓的文件夹只是文件的前缀\n参考链接https://www.codemzy.com/blog/delete-s3-folder-nodejs","title":"基于s3协议的对象存储如何创建或者删除文件夹"},{"content":"Hugo使用技巧 如何让hugo和typora均能正常显示图片 创建文章时，设置路径为\nhugo new posts/文章标题/index.md 注意：markdown文件必须以index命名\ntypora图片设置\n你的文章的目录结构\nhugo常用命令 hugo new posts/文章标题/index.md #新建文章 hugo #生成静态网页 hugo serve #生成静态网页并进行本地预览 ","permalink":"https://qvqw.date/posts/hugo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","summary":"Hugo使用技巧 如何让hugo和typora均能正常显示图片 创建文章时，设置路径为\nhugo new posts/文章标题/index.md 注意：markdown文件必须以index命名\ntypora图片设置\n你的文章的目录结构\nhugo常用命令 hugo new posts/文章标题/index.md #新建文章 hugo #生成静态网页 hugo serve #生成静态网页并进行本地预览 ","title":"Hugo使用技巧"},{"content":"事件 之前一直把国内域名解析到github的静态网站，最近收到通知，域名必须解析到国内的服务器。 而且由于我的域名是在腾讯云注册的，必须使用腾讯云的服务器，而不是比如阿里云的服务器厂商。 总结，越来越严了\n","permalink":"https://qvqw.date/posts/%E5%9B%BD%E5%86%85%E5%9F%9F%E5%90%8D%E9%97%AE%E9%A2%98/","summary":"事件 之前一直把国内域名解析到github的静态网站，最近收到通知，域名必须解析到国内的服务器。 而且由于我的域名是在腾讯云注册的，必须使用腾讯云的服务器，而不是比如阿里云的服务器厂商。 总结，越来越严了","title":"国内域名只能使用国内域名注册商的服务器"},{"content":"材料 rock5A、AX210无线网卡、小米路由器\nrock5A安装系统 系统地址https://github.com/radxa-build/rock-5a/releases\n这里我选择的是debian cli 版本，默认用户名和密码rock。\n换源 清华源地址https://mirror.tuna.tsinghua.edu.cn/help/debian/\n具体操作 无线校园网-\u0026gt;ax210网卡-\u0026gt;rock5A-\u0026gt;有线网口-\u0026gt;网线-\u0026gt;路由器\n1、首先使用ip addr查看网卡信息\n```bash 2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 66:66:39:b8:f4:d5 brd ff:ff:ff:ff:ff:ff inet 10.10.10.1/24 brd 10.10.10.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::6466:39ff:feb8:f4d5/64 scope link valid_lft forever preferred_lft forever 4: wlan0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 2c:33:58:52:d0:a0 brd ff:ff:ff:ff:ff:ff inet 10.104.54.161/16 brd 10.104.255.255 scope global dynamic noprefixroute wlan0 valid_lft 80213sec preferred_lft 80213sec inet6 fe80::1dd5:e6fe:28cf:a605/64 scope link noprefixroute valid_lft forever preferred_lft forever ``` 然后使用nmcli 将无线网卡wlan0连接到校园wifi\n2、编辑vi /etc/network/interfaces将有线网卡设置为静态ip 10.10.10.1\n3、执行 systemctl restart networking重启网络\n4、开启转发功能\nvim /etc/sysctl.conf #修改 net.ipv4.ip_forward=1 然后执行 sysctl -p 5、添加NAT规则\niptables -t nat -A POSTROUTING -j MASQUERADE 6、NAT规则持久化\napt update -y \u0026amp;\u0026amp; apt install iptables-persistent iptables-save \u0026gt; /etc/iptables/rules.v4 7、路由器wan设置ip 10.10.1.2 netmask为255.255.255.0即可上网\n参考文章：\nhttps://sinchie.com/posts/ubuntu-route/\nhttps://www.networkreverse.com/2020/06/how-to-build-linux-router-with-ubuntu.html\n","permalink":"https://qvqw.date/posts/rock5a%E8%A7%A3%E5%86%B3mac%E5%9C%B0%E5%9D%80%E9%99%90%E5%88%B6/","summary":"材料 rock5A、AX210无线网卡、小米路由器\nrock5A安装系统 系统地址https://github.com/radxa-build/rock-5a/releases\n这里我选择的是debian cli 版本，默认用户名和密码rock。\n换源 清华源地址https://mirror.tuna.tsinghua.edu.cn/help/debian/\n具体操作 无线校园网-\u0026gt;ax210网卡-\u0026gt;rock5A-\u0026gt;有线网口-\u0026gt;网线-\u0026gt;路由器\n1、首先使用ip addr查看网卡信息\n```bash 2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 66:66:39:b8:f4:d5 brd ff:ff:ff:ff:ff:ff inet 10.10.10.1/24 brd 10.10.10.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::6466:39ff:feb8:f4d5/64 scope link valid_lft forever preferred_lft forever 4: wlan0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 2c:33:58:52:d0:a0 brd ff:ff:ff:ff:ff:ff inet 10.104.54.161/16 brd 10.","title":"使用rock5A解决校园网mac地址限制"},{"content":"Start Hello World~\n","permalink":"https://qvqw.date/posts/hello/","summary":"Start Hello World~","title":"Hello"},{"content":"该博客基于GitHub page+hugo搭建 ","permalink":"https://qvqw.date/posts/github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/","summary":"该博客基于GitHub page+hugo搭建 ","title":"使用github搭建网站"}]