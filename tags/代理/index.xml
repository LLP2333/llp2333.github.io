<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>代理 on LLP2333&#39;s Blog</title>
    <link>https://qvqw.date/tags/%E4%BB%A3%E7%90%86/</link>
    <description>Recent content in 代理 on LLP2333&#39;s Blog</description>
    <image>
      <title>LLP2333&#39;s Blog</title>
      <url>https://qvqw.date/images/papermod-cover.png</url>
      <link>https://qvqw.date/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.115.4</generator>
    <language>en</language>
    <lastBuildDate>Tue, 21 Jan 2025 09:12:14 +0800</lastBuildDate>
    <atom:link href="https://qvqw.date/tags/%E4%BB%A3%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Cloudflare WARP 解锁Chatgpt</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8clouflare-warp-%E8%A7%A3%E9%94%81chatgpt/</link>
      <pubDate>Tue, 21 Jan 2025 09:12:14 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8clouflare-warp-%E8%A7%A3%E9%94%81chatgpt/</guid>
      <description>Chatgpt对ip有较为严格的限制，使用Cloudflare WARP可以隐藏服务器的真实ip，解除访问限制。
安装Cloudflare WARP 官方文档
# Add cloudflare gpg key curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg # Add this repo to your apt repositories echo &amp;#34;deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main&amp;#34; | sudo tee /etc/apt/sources.list.d/cloudflare-client.list # Install sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install cloudflare-warp 设置cloudflare warp 一定要把mode设置为proxy,然后连接。否则将无法使用ssh访问服务器。
warp-cli registration new #注册 warp-cli mode proxy # 设置代理模式为socks代理 warp-cli proxy port 40000 #设置代理端口40000 warp-cli connect # 连接 xray配置 inbounds 要开启 sniffing</description>
    </item>
    <item>
      <title>使用sni 代理解决服务器无法直接联网的问题</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8sni-%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%81%94%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jan 2025 10:41:12 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8sni-%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%81%94%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>正式系统无法访问外网，测试系统可以访问外网。正式系统的一个SDK需要向外网发送HTTP请求，考虑使用sni 代理。
软件 gost 参考文档
部署 能联网的测试机使用docker compose部署（设置xxx.com的sni代理白名单，xxx.com前面的~表示白名单，不加~表示黑名单） services: gost: image: gogost/gost container_name: gost ports: - &amp;#34;80:80&amp;#34; command: -L sni://:80?bypass=~xxx.com restart: unless-stopped 不能联网的正式机配置/etc/hosts 测试机ip xxx.com 我的后端是容器部署的，然后给容器配置/etc/hosts文件映射就可以了
注意 不能在构建docker image时候修改hosts，只能在容器运行时进行映射或者修改。因为构建阶段/etc/hosts是只读的。image是许多只读layer的叠加，而容器是只读layer和可读layer的叠加</description>
    </item>
  </channel>
</rss>
