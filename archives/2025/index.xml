<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2025 on LLP2333&#39;s Blog</title>
    <link>https://qvqw.date/archives/2025/</link>
    <description>Recent content in 2025 on LLP2333&#39;s Blog</description>
    <image>
      <title>LLP2333&#39;s Blog</title>
      <url>https://qvqw.date/images/papermod-cover.png</url>
      <link>https://qvqw.date/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.115.4</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Apr 2025 18:27:15 +0800</lastBuildDate>
    <atom:link href="https://qvqw.date/archives/2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>macOS上使用小米互联互通共享小米手机屏幕</title>
      <link>https://qvqw.date/posts/macos%E4%B8%8A%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%B1%B3%E4%BA%92%E8%81%94%E4%BA%92%E9%80%9A%E5%85%B1%E4%BA%AB%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95/</link>
      <pubDate>Tue, 08 Apr 2025 18:27:15 +0800</pubDate>
      <guid>https://qvqw.date/posts/macos%E4%B8%8A%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%B1%B3%E4%BA%92%E8%81%94%E4%BA%92%E9%80%9A%E5%85%B1%E4%BA%AB%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95/</guid>
      <description>最近把我的12turbo升级到了HyperOS 2.0,想试一试小米的互联互通功能.
小米互联互通MAC端下载地址 https://hyperos.mi.com/continuity/abilities/ab0016
遇到的问题 使用互联互联互通仅能发送文件,但是不能共享屏幕.
解决方案 后来发现,小米的互联互通功能限制地区,必须是中国大陆.而我的mac系统设置的是美区英文.如果想使用屏幕共享,要么在设置里将地区改为中国大陆.
系统的地区设置会影响全局,如果想仅对小米互联互通设置地区,可以执行
defaults write com.xiaomi.hyperConnect AppleLocale -string &amp;#34;zh_CN&amp;#34; </description>
    </item>
    <item>
      <title>摸鱼~</title>
      <link>https://qvqw.date/posts/%E6%83%B3%E8%A6%81%E6%91%B8%E9%B1%BC/</link>
      <pubDate>Tue, 25 Feb 2025 18:08:52 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E6%83%B3%E8%A6%81%E6%91%B8%E9%B1%BC/</guid>
      <description>从大学生到办公室的牛马，已经半年多了。 我的确还是很喜欢计算机喜欢折腾，但是和大学相比没有那么多的时间和精力了。有时我也会感觉，上班让我失去了对计算机的兴趣。后来我发现不是的，我只是不喜欢工作罢了，当我有时间去做自己的事情时，我还是很享受折腾计算机的乐趣。 我觉得除了工作的任务，是需要有一些时间来学习新的技术，尝试新的内容。在摸鱼时进步，在摸鱼时提高。不需要什么准备，有想法直接开始做。希望我的技术，在2025能有更大的提高，加油！</description>
    </item>
    <item>
      <title>尝试在windows设置端口转发以及反向代理</title>
      <link>https://qvqw.date/posts/%E5%B0%9D%E8%AF%95%E5%9C%A8windows%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 17 Feb 2025 18:18:33 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E5%B0%9D%E8%AF%95%E5%9C%A8windows%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>最近考虑买一台MacBook Pro，当作新的生产力。但是目前的开发又离不开X86的windows平台，考虑使用mac进行代码开发运行，使用windows进行调试。项目中用到的数据库以及第三方的接口需要使用vpn访问内网，且vpn只能登录一个设备，所以考虑在windows上登录vpn，系统运行需要用到的数据库以及第三方接口都使用windows电脑进行转发。
数据库转发(转发tcp) 我用的是windows自带的portproxy功能
使用以下命令即可实现端口转发
netsh interface portproxy add v4tov4 listenport=[监听端口号] listenaddress=[本地IP地址] connectport=[目标端口号] connectaddress=[目标IP地址] 验证端口转发是否配置成功
netsh interface portproxy show all 如果想删除某个端口转发规则
netsh interface portproxy delete v4tov4 listenport=[监听端口号] listenaddress=[本地IP地址] 第三方接口转发 我使用的是caddy代理,只需要一行命令即可
caddy reverse-proxy --from 本机ip --to 第三方接口的内网ip 踩坑 尝试过让windows登vpn，然后开热点给另一个电脑。经测试另一台电脑连上热点只能访问外网，查资料说windows的个人热点直接走物理网卡转发，不会走代理。
尝试用caddy代理数据库的tcp连接，理论上可以使用caddy的第三方模块实现代理tcp，但是没有研究明白，放弃了，感觉caddy还是代理http请求更合适一些。
结尾 目前只是做了数据库以及第三方接口的代理，等过一段时间买到新电脑了，再继续折腾。生命不息息，折腾不止😂</description>
    </item>
    <item>
      <title>使用Cloudflare WARP 解锁Chatgpt</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8clouflare-warp-%E8%A7%A3%E9%94%81chatgpt/</link>
      <pubDate>Tue, 21 Jan 2025 09:12:14 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8clouflare-warp-%E8%A7%A3%E9%94%81chatgpt/</guid>
      <description>Chatgpt对ip有较为严格的限制，使用Cloudflare WARP可以隐藏服务器的真实ip，解除访问限制。
安装Cloudflare WARP 官方文档
# Add cloudflare gpg key curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg # Add this repo to your apt repositories echo &amp;#34;deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main&amp;#34; | sudo tee /etc/apt/sources.list.d/cloudflare-client.list # Install sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install cloudflare-warp 设置cloudflare warp 一定要把mode设置为proxy,然后连接。否则将无法使用ssh访问服务器。
warp-cli registration new #注册 warp-cli mode proxy # 设置代理模式为socks代理 warp-cli proxy port 40000 #设置代理端口40000 warp-cli connect # 连接 xray配置 inbounds 要开启 sniffing</description>
    </item>
    <item>
      <title>使用sni 代理解决服务器无法直接联网的问题</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8sni-%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%81%94%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jan 2025 10:41:12 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8sni-%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%81%94%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>正式系统无法访问外网，测试系统可以访问外网。正式系统的一个SDK需要向外网发送HTTP请求，考虑使用sni 代理。
软件 gost 参考文档
部署 能联网的测试机使用docker compose部署（设置xxx.com的sni代理白名单，xxx.com前面的~表示白名单，不加~表示黑名单） services: gost: image: gogost/gost container_name: gost ports: - &amp;#34;80:80&amp;#34; command: -L sni://:80?bypass=~xxx.com restart: unless-stopped 不能联网的正式机配置/etc/hosts 测试机ip xxx.com 我的后端是容器部署的，然后给容器配置/etc/hosts文件映射就可以了
注意 不能在构建docker image时候修改hosts，只能在容器运行时进行映射或者修改。因为构建阶段/etc/hosts是只读的。image是许多只读layer的叠加，而容器是只读layer和可读layer的叠加</description>
    </item>
    <item>
      <title>使用AspectJ拦截第三方SDK请求</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8aspectj%E6%8B%A6%E6%88%AA%E7%AC%AC%E4%B8%89%E6%96%B9sdk%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Fri, 10 Jan 2025 13:42:02 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8aspectj%E6%8B%A6%E6%88%AA%E7%AC%AC%E4%B8%89%E6%96%B9sdk%E8%AF%B7%E6%B1%82/</guid>
      <description>最近使用一个第三方的SDK来请求数据，但是请求的服务器对ip有白名单限制，SDK使用的apache的commons-httpclient: 3.1
发送请求。于是尝试使用ApectJ运行时织入，拦截发送HTTP请求的代码，修改参数.
依赖(用的1.9.19版本) &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjrt&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; maven插件 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectj-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; 切面 import org.apache.commons.httpclient.HttpMethod; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.springframework.stereotype.Component; @Aspect @Component public class HttpClientAspect { public static HttpClientAspect aspectOf() { return new HttpClientAspect(); } @Around(&amp;#34;execution(* org.apache.commons.httpclient.HttpClient.executeMethod(..))&amp;#34;) public Object aroundHttpExecution(ProceedingJoinPoint joinPoint) throws Throwable { System.out.println(&amp;#34;======================================&amp;#34;); Object[] args = joinPoint.getArgs(); // 获取HttpMethod参数 if (args != null &amp;amp;&amp;amp; args.</description>
    </item>
    <item>
      <title>Java的ResourceBundle读取配置文件路径</title>
      <link>https://qvqw.date/posts/java%E7%9A%84resourcebundle%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 08 Jan 2025 16:06:02 +0800</pubDate>
      <guid>https://qvqw.date/posts/java%E7%9A%84resourcebundle%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</guid>
      <description>当你使用
// 1. 创建或加载 ResourceBundle ResourceBundle bundle = ResourceBundle.getBundle(&amp;#34;messages&amp;#34;); // 从 classpath 加载 messages.properties // 2. 使用getString()获取字符串值 String value = bundle.getString(&amp;#34;key.name&amp;#34;); 读取文件时 代码默认会读取src/main/resources/messages.properties
src/main/resources/messages.properties // 默认 src/main/resources/messages_zh.properties // 中文 src/main/resources/messages_en.properties // 英文 样例配置文件
key.name=值 welcome.message=欢迎 error.code=500 如果想指定读取的文件
// 指定英文 Locale Locale enLocale = new Locale(&amp;#34;en&amp;#34;); // 或者直接用 Locale.ENGLISH // 加载英文资源包 ResourceBundle bundle = ResourceBundle.getBundle(&amp;#34;messages&amp;#34;, enLocale); // 获取英文值 String value = bundle.getString(&amp;#34;key.name&amp;#34;); </description>
    </item>
    <item>
      <title>某云办公应用api存在IP白名单绕过风险</title>
      <link>https://qvqw.date/posts/%E6%9F%90%E4%BA%91%E5%8A%9E%E5%85%AC%E5%BA%94%E7%94%A8api%E5%AD%98%E5%9C%A8ip%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87%E9%A3%8E%E9%99%A9/</link>
      <pubDate>Wed, 08 Jan 2025 10:14:16 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E6%9F%90%E4%BA%91%E5%8A%9E%E5%85%AC%E5%BA%94%E7%94%A8api%E5%AD%98%E5%9C%A8ip%E7%99%BD%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87%E9%A3%8E%E9%99%A9/</guid>
      <description>最近在做一个消息推送企业某信的需求，使用的不是官方的api,而是和企业某信可以集成的云办公平台的api。由于api有ip白名单限制，导致我必须在特定化网络环境下发请求，测试很麻烦，所以想测试一下能不能绕过限制。 想要绕过限制，首先要知道服务器如何获取发送者的ip。
服务器如何获取请求者ip 获取请求者 IP 本质上就两个来源：
直接从 IP 数据包获取 这就是 HttpServletRequest的getRemoteAddr() 的工作原理，获取的是直接与服务器建立 TCP 连接的客户端 IP，在没有代理的情况下,这就是真实的客户端 IP 从 HTTP 请求头获取 常见的请求头有: X-Forwarded-For X-Real-IP Proxy-Client-IP WL-Proxy-Client-IP 测试 这里我使用了postman伪造了请求头X-Forwarded-For，经过测试，理论上只要知道正确的ip，就可以让ip白名单功能失效。
如果你有服务器的访问权限，但是只知道服务器的内网ip，可以尝试
curl ifconfig.me 然后就能得到服务器的公网ip了
安全建议 改用网络层的源IP地址(TCP/IP报文中的source IP)进行验证
如果必须使用代理转发,建议只信任内部代理服务器传递的XFF头
吐槽 某云办公平台必须付费才能获得访问api的密钥，并且密钥只有一个，测试只能直接在正式系统测</description>
    </item>
    <item>
      <title>用go写了个简化hugo文章创建的小工具</title>
      <link>https://qvqw.date/posts/%E7%94%A8go%E5%86%99%E4%BA%86%E4%B8%AA%E7%AE%80%E5%8C%96hugo%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 07 Jan 2025 14:11:52 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E7%94%A8go%E5%86%99%E4%BA%86%E4%B8%AA%E7%AE%80%E5%8C%96hugo%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid>
      <description>目前使用hugo作为博客系统，使用typora作为博客的编辑器。书接上文Hugo使用技巧，之前每次都需要在博客根目录执行
hugo new posts/文章标题/index.md 创建新的文章。感觉很麻烦。所以想写个工具简化这个过程。
思路 输入文件标题后执行创建文章的命令，然后生成新的文章的快捷方式，方便使用typora进行编辑。
代码 使用Claude生成的，很方便。
如果是windows平台，使用
go build -o HugoHelper.exe main.go 进行编译。
使用前需要配置blog环境变量，key为blog,value为你的项目的根路径
比如我的根目录是C:\UGit\qvqw.date
代码
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;path/filepath&amp;#34; &amp;#34;strings&amp;#34; ) func main() { // 获取当前程序执行路径 execPath, err := os.Getwd() if err != nil { fmt.Printf(&amp;#34;错误: 获取当前路径失败: %v\n&amp;#34;, err) os.Exit(1) } // 从环境变量获取博客路径 blogPath := os.Getenv(&amp;#34;blog&amp;#34;) if blogPath == &amp;#34;&amp;#34; { fmt.Println(&amp;#34;错误: 环境变量 &amp;#39;blog&amp;#39; 未设置&amp;#34;) os.Exit(1) } // 验证博客路径是否存在 if _, err := os.</description>
    </item>
  </channel>
</rss>
