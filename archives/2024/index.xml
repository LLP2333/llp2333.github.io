<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2024 on LLP2333&#39;s Blog</title>
    <link>https://qvqw.date/archives/2024/</link>
    <description>Recent content in 2024 on LLP2333&#39;s Blog</description>
    <image>
      <title>LLP2333&#39;s Blog</title>
      <url>https://qvqw.date/images/papermod-cover.png</url>
      <link>https://qvqw.date/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.147.1</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Apr 2024 17:35:54 +0800</lastBuildDate>
    <atom:link href="https://qvqw.date/archives/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用cpolar为rock5A进行内网穿透</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8cpolar%E4%B8%BArock5a%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sat, 13 Apr 2024 17:35:54 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8cpolar%E4%B8%BArock5a%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>&lt;h1 id=&#34;使用-cpolar-为-rock-5a-进行内网穿透&#34;&gt;使用 cpolar 为 rock 5A 进行内网穿透&lt;/h1&gt;
&lt;p&gt;github 上有开源的 frp 项目，如果有一台云服务器的话，用来内网穿透很不错。但是，使用云服务+frp 的方案，开放某个端口，还需要去修改云服务的安全组，比较麻烦。考虑到方便性，我用了 cpolar 做内网穿透。&lt;/p&gt;
&lt;p&gt;注：rock 5A 为 arm 开发板，系统为 debian12（和树莓派、香橙派等 arm 计算机的教程理论上通用）&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;我这里使用的官方的一键安装脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;授权&#34;&gt;授权&lt;/h2&gt;
&lt;p&gt;执行下面 的命令进行授权（授权码在 cpolar 验证页面获取）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cpolar authtoken xxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;设置开机自启动并启动-cpolar-服务&#34;&gt;设置开机自启动并启动 cpolar 服务&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl enable cpolar
systemctl start cpolar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成上面的内容就基本上配置好了,你可以在 cpolar 官网的状态页面看到你的 ssh 隧道，可以通过该域名和端口远程访问本地的 rock 5A&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image-20240413180045405&#34; loading=&#34;lazy&#34; src=&#34;https://minioapi.qvqw.date/qvqw/0ca38eac-69d8-489f-80e1-ea7617ccb444.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意：cpolar 默认会配置本地机器 ssh 的 内网穿透，如需定制自己的内网穿透，请尝试根据官网文档修改配置文件。免费的内网穿透会在机器重启后变更域名和端口，重启后可以从 cpolar 官网状态页面获取，也可以考虑升级付费用户。&lt;/p&gt;
&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;p&gt;默认的配置文件在&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/local/etc/cpolar/cpolar.yml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;补充说明&#34;&gt;补充说明&lt;/h2&gt;
&lt;p&gt;使用过程中，我发现 cpolar 代理 http 导致了 rock 5A 的 cpu 占用飙升。后续我用了阿里云的服务器+frp 代理了 ssh,cloudflare tunnel 代理 http，cpu 占用几乎忽略不计。因此，建议 cpolar 内网穿透方案仅作备选。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一次系统迁移</title>
      <link>https://qvqw.date/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Thu, 11 Apr 2024 13:00:56 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB/</guid>
      <description>&lt;h1 id=&#34;记录一次系统迁移&#34;&gt;记录一次系统迁移&lt;/h1&gt;
&lt;p&gt;开发板为 rock 5a，使用的为 Debian 系统。最近买了一个香橙派 5plus 的 64G 的 emmc(和 rock5A 通用并且比官方的更便宜)，打算将系统从内存卡迁移到 emmc。&lt;/p&gt;
&lt;h2 id=&#34;查看当前磁盘情况&#34;&gt;查看当前磁盘情况&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fdisk -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到新磁盘名字为/dev/mmcblk0,原内存卡设备为/dev/mmcblk1&lt;/p&gt;
&lt;h2 id=&#34;使用-dd-命令迁移-系统&#34;&gt;使用 dd 命令迁移 系统&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo dd if=/dev/mmcblk1 of=/dev/mmcblk0 bs=4M status=progress
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;：待执行的命令，即复制和转换命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if=/dev/mmcblk1&lt;/code&gt;：&lt;code&gt;if&lt;/code&gt; 表示输入文件（input file）。&lt;code&gt;/dev/mmcblk1&lt;/code&gt; 是源设备的文件路径，也就是数据的来源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;of=/dev/mmcblk0&lt;/code&gt;：&lt;code&gt;of&lt;/code&gt; 表示输出文件（output file）。&lt;code&gt;/dev/mmcblk0&lt;/code&gt; 是目标设备的文件路径，也就是数据要写入的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bs=4M&lt;/code&gt;：&lt;code&gt;bs&lt;/code&gt; 表示块大小（block size）。设置为每次读写 4M 数据。设定一个适当的块大小可以提高数据的复制速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;status=progress&lt;/code&gt;：这是一个可选参数，它可以实时显示&lt;code&gt;dd&lt;/code&gt;命令的进度信息。这对于一些需要花费长时间的复制任务来说非常有用，可以让用户知道复制过程的进度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-parted-命令调整磁盘大小&#34;&gt;使用 parted 命令调整磁盘大小&lt;/h2&gt;
&lt;p&gt;如果不进行调整，系统可用大小还是默认的 32G&lt;/p&gt;
&lt;p&gt;先查看磁盘情况&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parted /dev/mmcblk0 print  #查看指定设备的磁盘大小
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我对第 3 个分区进行了调整，使其扩容到 emmc 最大能支持的容量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parted     /dev/mmcblk0    resizepart 3 100%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后用 resize2f 命令调整文件系统大小&lt;/p&gt;</description>
    </item>
    <item>
      <title>前端路线</title>
      <link>https://qvqw.date/posts/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Sat, 06 Apr 2024 20:29:58 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%BA%BF/</guid>
      <description>&lt;h1 id=&#34;前端路线&#34;&gt;前端路线&lt;/h1&gt;
&lt;h2 id=&#34;0-roadmap&#34;&gt;0 Roadmap&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://roadmap.sh/frontend?r=frontend-beginner&#34;&gt;新手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://roadmap.sh/frontend&#34;&gt;进阶&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-html--css&#34;&gt;1 HTML &amp;amp; CSS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/chinese/learn/&#34;&gt;freecodecamp网站&lt;/a&gt; 里的 『响应式网页设计认证』&lt;/li&gt;
&lt;li&gt;css学习：&lt;a href=&#34;https://zh.learnlayout.com/&#34;&gt;learnlayout网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;flex 布局：
&lt;ol&gt;
&lt;li&gt;学习：&lt;a href=&#34;https://static.vgee.cn/static/index.html&#34;&gt;vgee.cn网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;练习：flexboxfroggy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-javascript&#34;&gt;2 JavaScript&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;《JavaScript权威指南》第六版 （2012年出版）&lt;a href=&#34;https://kingyinliang.github.io/PDF/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%EF%BC%88%E7%AC%AC6%E7%89%88%EF%BC%89.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《JavaScript 高级程序设计》（2019年出版）&lt;/li&gt;
&lt;li&gt;JavaScript 教程：&lt;a href=&#34;https://zh.javascript.info/&#34;&gt;网址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阮一峰的 ES6 教程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-框架&#34;&gt;3 框架&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-构建工具&#34;&gt;4 构建工具&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;《前端工程化》基于Vue3 教材：&lt;a href=&#34;https://vue3.chengpeiquan.com/&#34;&gt;网址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Webpack&lt;/li&gt;
&lt;li&gt;Vite&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-大而全的教程&#34;&gt;5 大而全的教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;微软的前端教程：&lt;a href=&#34;https://github.com/microsoft/Web-Dev-For-Beginners&#34;&gt;github网址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;coderwhy 大前端系列教程&lt;/li&gt;
&lt;li&gt;各种教程的网站：质量挺高（英语） &lt;a href=&#34;https://frontendmasters.com/courses/&#34;&gt;frontendmasters网址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn&#34;&gt;网址&lt;/a&gt;：大而全的文档&lt;/li&gt;
&lt;li&gt;ChatGPT：升级到 plus 版本，打开使用网络内容的设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-具体步骤&#34;&gt;6 具体步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;基础知识（a、b可同步进行）
&lt;ol&gt;
&lt;li&gt;HTML &amp;amp; CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;学习框架
&lt;ol&gt;
&lt;li&gt;React：更适合作为第一个框架学习&lt;/li&gt;
&lt;li&gt;Vue：使得用起来更方便，但不利于新人了解具体实现原理&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;构建工具
&lt;ol&gt;
&lt;li&gt;在学习框架时也会用到构建工具&lt;/li&gt;
&lt;li&gt;学完框架后再系统性学习&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;抄一个网站
&lt;ol&gt;
&lt;li&gt;在学完 HTML &amp;amp; CSS 时可以抄静态页面&lt;/li&gt;
&lt;li&gt;学完 JavaScript、框架后可以抄整个站&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>基于s3协议的对象存储如何创建或者删除文件夹</title>
      <link>https://qvqw.date/posts/%E5%9F%BA%E4%BA%8Es3%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%88%96%E8%80%85%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Sat, 06 Apr 2024 17:23:56 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E5%9F%BA%E4%BA%8Es3%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%88%96%E8%80%85%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>&lt;h1 id=&#34;基于s3协议的对象存储如何创建或者删除文件夹&#34;&gt;基于s3协议的对象存储如何创建或者删除文件夹&lt;/h1&gt;
&lt;p&gt;​    首先我们必须明确的是，对象存储没有文件 夹的概念，所谓的文件夹只是文件的前缀&lt;/p&gt;
&lt;p&gt;参考链接https://www.codemzy.com/blog/delete-s3-folder-nodejs&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo使用技巧</title>
      <link>https://qvqw.date/posts/hugo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Apr 2024 19:39:06 +0800</pubDate>
      <guid>https://qvqw.date/posts/hugo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h1 id=&#34;hugo使用技巧&#34;&gt;Hugo使用技巧&lt;/h1&gt;
&lt;h2 id=&#34;如何让hugo和typora均能正常显示图片&#34;&gt;如何让hugo和typora均能正常显示图片&lt;/h2&gt;
&lt;p&gt;创建文章时，设置路径为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new posts/文章标题/index.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：markdown文件必须以&lt;code&gt;index&lt;/code&gt;命名&lt;/p&gt;
&lt;p&gt;typora图片设置&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image-20240401194227774&#34; loading=&#34;lazy&#34; src=&#34;https://minioapi.qvqw.date/qvqw/3d11acc4-162c-45a7-978b-b430755a78d8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;你的文章的目录结构&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image-20240401194542462&#34; loading=&#34;lazy&#34; src=&#34;https://minioapi.qvqw.date/qvqw/62759524-a1c3-4caa-95ae-645d97a05c87.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugo常用命令&#34;&gt;hugo常用命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo new posts/文章标题/index.md     &lt;span class=&#34;c1&#34;&gt;#新建文章&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo &lt;span class=&#34;c1&#34;&gt;#生成静态网页&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo serve  &lt;span class=&#34;c1&#34;&gt;#生成静态网页并进行本地预览&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
