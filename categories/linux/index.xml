<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on LLP2333&#39;s Blog</title>
    <link>https://qvqw.date/categories/linux/</link>
    <description>Recent content in Linux on LLP2333&#39;s Blog</description>
    <image>
      <title>LLP2333&#39;s Blog</title>
      <url>https://qvqw.date/images/papermod-cover.png</url>
      <link>https://qvqw.date/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.147.1</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Apr 2024 17:35:54 +0800</lastBuildDate>
    <atom:link href="https://qvqw.date/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用cpolar为rock5A进行内网穿透</title>
      <link>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8cpolar%E4%B8%BArock5a%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sat, 13 Apr 2024 17:35:54 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E4%BD%BF%E7%94%A8cpolar%E4%B8%BArock5a%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>&lt;h1 id=&#34;使用-cpolar-为-rock-5a-进行内网穿透&#34;&gt;使用 cpolar 为 rock 5A 进行内网穿透&lt;/h1&gt;
&lt;p&gt;github 上有开源的 frp 项目，如果有一台云服务器的话，用来内网穿透很不错。但是，使用云服务+frp 的方案，开放某个端口，还需要去修改云服务的安全组，比较麻烦。考虑到方便性，我用了 cpolar 做内网穿透。&lt;/p&gt;
&lt;p&gt;注：rock 5A 为 arm 开发板，系统为 debian12（和树莓派、香橙派等 arm 计算机的教程理论上通用）&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;我这里使用的官方的一键安装脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;授权&#34;&gt;授权&lt;/h2&gt;
&lt;p&gt;执行下面 的命令进行授权（授权码在 cpolar 验证页面获取）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cpolar authtoken xxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;设置开机自启动并启动-cpolar-服务&#34;&gt;设置开机自启动并启动 cpolar 服务&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl enable cpolar
systemctl start cpolar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成上面的内容就基本上配置好了,你可以在 cpolar 官网的状态页面看到你的 ssh 隧道，可以通过该域名和端口远程访问本地的 rock 5A&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image-20240413180045405&#34; loading=&#34;lazy&#34; src=&#34;https://qvqw.date/posts/%E4%BD%BF%E7%94%A8cpolar%E4%B8%BArock5a%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/index.assets/image-20240413180045405.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意：cpolar 默认会配置本地机器 ssh 的 内网穿透，如需定制自己的内网穿透，请尝试根据官网文档修改配置文件。免费的内网穿透会在机器重启后变更域名和端口，重启后可以从 cpolar 官网状态页面获取，也可以考虑升级付费用户。&lt;/p&gt;
&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;p&gt;默认的配置文件在&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/local/etc/cpolar/cpolar.yml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;补充说明&#34;&gt;补充说明&lt;/h2&gt;
&lt;p&gt;使用过程中，我发现 cpolar 代理 http 导致了 rock 5A 的 cpu 占用飙升。后续我用了阿里云的服务器+frp 代理了 ssh,cloudflare tunnel 代理 http，cpu 占用几乎忽略不计。因此，建议 cpolar 内网穿透方案仅作备选。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一次系统迁移</title>
      <link>https://qvqw.date/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Thu, 11 Apr 2024 13:00:56 +0800</pubDate>
      <guid>https://qvqw.date/posts/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB/</guid>
      <description>&lt;h1 id=&#34;记录一次系统迁移&#34;&gt;记录一次系统迁移&lt;/h1&gt;
&lt;p&gt;开发板为 rock 5a，使用的为 Debian 系统。最近买了一个香橙派 5plus 的 64G 的 emmc(和 rock5A 通用并且比官方的更便宜)，打算将系统从内存卡迁移到 emmc。&lt;/p&gt;
&lt;h2 id=&#34;查看当前磁盘情况&#34;&gt;查看当前磁盘情况&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fdisk -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到新磁盘名字为/dev/mmcblk0,原内存卡设备为/dev/mmcblk1&lt;/p&gt;
&lt;h2 id=&#34;使用-dd-命令迁移-系统&#34;&gt;使用 dd 命令迁移 系统&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo dd if=/dev/mmcblk1 of=/dev/mmcblk0 bs=4M status=progress
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;：待执行的命令，即复制和转换命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if=/dev/mmcblk1&lt;/code&gt;：&lt;code&gt;if&lt;/code&gt; 表示输入文件（input file）。&lt;code&gt;/dev/mmcblk1&lt;/code&gt; 是源设备的文件路径，也就是数据的来源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;of=/dev/mmcblk0&lt;/code&gt;：&lt;code&gt;of&lt;/code&gt; 表示输出文件（output file）。&lt;code&gt;/dev/mmcblk0&lt;/code&gt; 是目标设备的文件路径，也就是数据要写入的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bs=4M&lt;/code&gt;：&lt;code&gt;bs&lt;/code&gt; 表示块大小（block size）。设置为每次读写 4M 数据。设定一个适当的块大小可以提高数据的复制速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;status=progress&lt;/code&gt;：这是一个可选参数，它可以实时显示&lt;code&gt;dd&lt;/code&gt;命令的进度信息。这对于一些需要花费长时间的复制任务来说非常有用，可以让用户知道复制过程的进度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-parted-命令调整磁盘大小&#34;&gt;使用 parted 命令调整磁盘大小&lt;/h2&gt;
&lt;p&gt;如果不进行调整，系统可用大小还是默认的 32G&lt;/p&gt;
&lt;p&gt;先查看磁盘情况&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parted /dev/mmcblk0 print  #查看指定设备的磁盘大小
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我对第 3 个分区进行了调整，使其扩容到 emmc 最大能支持的容量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parted     /dev/mmcblk0    resizepart 3 100%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后用 resize2f 命令调整文件系统大小&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
